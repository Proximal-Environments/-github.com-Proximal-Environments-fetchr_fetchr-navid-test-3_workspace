// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.3
// source: base/comments.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "comments";

export enum ThreadType {
  THREAD_TYPE_UNSPECIFIED = 0,
  THREAD_TYPE_WARNING = 1,
  THREAD_TYPE_COMMENT = 2,
  THREAD_TYPE_ISSUE = 3,
  UNRECOGNIZED = -1,
}

export function threadTypeFromJSON(object: any): ThreadType {
  switch (object) {
    case 0:
    case "THREAD_TYPE_UNSPECIFIED":
      return ThreadType.THREAD_TYPE_UNSPECIFIED;
    case 1:
    case "THREAD_TYPE_WARNING":
      return ThreadType.THREAD_TYPE_WARNING;
    case 2:
    case "THREAD_TYPE_COMMENT":
      return ThreadType.THREAD_TYPE_COMMENT;
    case 3:
    case "THREAD_TYPE_ISSUE":
      return ThreadType.THREAD_TYPE_ISSUE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ThreadType.UNRECOGNIZED;
  }
}

export function threadTypeToJSON(object: ThreadType): string {
  switch (object) {
    case ThreadType.THREAD_TYPE_UNSPECIFIED:
      return "THREAD_TYPE_UNSPECIFIED";
    case ThreadType.THREAD_TYPE_WARNING:
      return "THREAD_TYPE_WARNING";
    case ThreadType.THREAD_TYPE_COMMENT:
      return "THREAD_TYPE_COMMENT";
    case ThreadType.THREAD_TYPE_ISSUE:
      return "THREAD_TYPE_ISSUE";
    case ThreadType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ThreadStatus {
  THREAD_STATUS_UNSPECIFIED = 0,
  THREAD_STATUS_OPEN = 1,
  THREAD_STATUS_RESOLVED = 2,
  THREAD_STATUS_NOT_APPLICABLE = 3,
  UNRECOGNIZED = -1,
}

export function threadStatusFromJSON(object: any): ThreadStatus {
  switch (object) {
    case 0:
    case "THREAD_STATUS_UNSPECIFIED":
      return ThreadStatus.THREAD_STATUS_UNSPECIFIED;
    case 1:
    case "THREAD_STATUS_OPEN":
      return ThreadStatus.THREAD_STATUS_OPEN;
    case 2:
    case "THREAD_STATUS_RESOLVED":
      return ThreadStatus.THREAD_STATUS_RESOLVED;
    case 3:
    case "THREAD_STATUS_NOT_APPLICABLE":
      return ThreadStatus.THREAD_STATUS_NOT_APPLICABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ThreadStatus.UNRECOGNIZED;
  }
}

export function threadStatusToJSON(object: ThreadStatus): string {
  switch (object) {
    case ThreadStatus.THREAD_STATUS_UNSPECIFIED:
      return "THREAD_STATUS_UNSPECIFIED";
    case ThreadStatus.THREAD_STATUS_OPEN:
      return "THREAD_STATUS_OPEN";
    case ThreadStatus.THREAD_STATUS_RESOLVED:
      return "THREAD_STATUS_RESOLVED";
    case ThreadStatus.THREAD_STATUS_NOT_APPLICABLE:
      return "THREAD_STATUS_NOT_APPLICABLE";
    case ThreadStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message {
  id: number;
  content: string;
  userId: string;
  userName: string;
  createdAt: number;
}

export interface Thread {
  id: number;
  type: ThreadType;
  createdAt: number;
  messages: Message[];
  status: ThreadStatus;
}

function createBaseMessage(): Message {
  return { id: 0, content: "", userId: "", userName: "", createdAt: 0 };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.userName !== "") {
      writer.uint32(34).string(message.userName);
    }
    if (message.createdAt !== 0) {
      writer.uint32(40).int64(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.userName !== "") {
      obj.userName = message.userName;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    return obj;
  },
};

function createBaseThread(): Thread {
  return { id: 0, type: 0, createdAt: 0, messages: [], status: 0 };
}

export const Thread: MessageFns<Thread> = {
  encode(message: Thread, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.createdAt !== 0) {
      writer.uint32(24).int64(message.createdAt);
    }
    for (const v of message.messages) {
      Message.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Thread {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThread();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Thread {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      type: isSet(object.type) ? threadTypeFromJSON(object.type) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      messages: globalThis.Array.isArray(object?.messages) ? object.messages.map((e: any) => Message.fromJSON(e)) : [],
      status: isSet(object.status) ? threadStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: Thread): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.type !== 0) {
      obj.type = threadTypeToJSON(message.type);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => Message.toJSON(e));
    }
    if (message.status !== 0) {
      obj.status = threadStatusToJSON(message.status);
    }
    return obj;
  },
};

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
