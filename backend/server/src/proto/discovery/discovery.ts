// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.3
// source: discovery/discovery.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Product, ProductCategory, productCategoryFromJSON, productCategoryToJSON } from "../base/base";

export const protobufPackage = "discovery";

export interface GetDiscoveryProductsRequest {
  lastProductId?: string | undefined;
  category?: ProductCategory | undefined;
}

export interface GetDiscoveryProductsResponse {
  products: Product[];
}

export interface StartDiscoverySessionRequest {
  query: string;
  productId?: string | undefined;
}

export interface StartDiscoverySessionResponse {
  products: Product[];
  chatId: string;
  suggestedSearches: string[];
  response: string;
  category: string;
}

export interface ContinueDiscoverySessionRequest {
  chatId: string;
  productId?: string | undefined;
  message?: string | undefined;
}

export interface ContinueDiscoverySessionResponse {
  products: Product[];
  suggestedSearches: string[];
  response: string;
  category: string;
}

export interface BookmarkProductRequest {
  productId: string;
  chatId?: string | undefined;
}

export interface BookmarkProductResponse {
}

export interface UnbookmarkProductRequest {
  productId: string;
  chatId?: string | undefined;
}

export interface UnbookmarkProductResponse {
}

export interface GetBookmarkedProductIdsRequest {
  chatId: string;
}

export interface GetBookmarkedProductIdsResponse {
  productIds: string[];
}

export interface ListBookmarkedProductsRequest {
  lastCreatedAt?: string | undefined;
}

export interface ListBookmarkedProductsResponse {
  products: Product[];
  lastCreatedAt?: string | undefined;
}

function createBaseGetDiscoveryProductsRequest(): GetDiscoveryProductsRequest {
  return { lastProductId: undefined, category: undefined };
}

export const GetDiscoveryProductsRequest: MessageFns<GetDiscoveryProductsRequest> = {
  encode(message: GetDiscoveryProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastProductId !== undefined) {
      writer.uint32(10).string(message.lastProductId);
    }
    if (message.category !== undefined) {
      writer.uint32(16).int32(message.category);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDiscoveryProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDiscoveryProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastProductId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.category = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDiscoveryProductsRequest {
    return {
      lastProductId: isSet(object.lastProductId) ? globalThis.String(object.lastProductId) : undefined,
      category: isSet(object.category) ? productCategoryFromJSON(object.category) : undefined,
    };
  },

  toJSON(message: GetDiscoveryProductsRequest): unknown {
    const obj: any = {};
    if (message.lastProductId !== undefined) {
      obj.lastProductId = message.lastProductId;
    }
    if (message.category !== undefined) {
      obj.category = productCategoryToJSON(message.category);
    }
    return obj;
  },
};

function createBaseGetDiscoveryProductsResponse(): GetDiscoveryProductsResponse {
  return { products: [] };
}

export const GetDiscoveryProductsResponse: MessageFns<GetDiscoveryProductsResponse> = {
  encode(message: GetDiscoveryProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDiscoveryProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDiscoveryProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDiscoveryProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetDiscoveryProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },
};

function createBaseStartDiscoverySessionRequest(): StartDiscoverySessionRequest {
  return { query: "", productId: undefined };
}

export const StartDiscoverySessionRequest: MessageFns<StartDiscoverySessionRequest> = {
  encode(message: StartDiscoverySessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.productId !== undefined) {
      writer.uint32(18).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartDiscoverySessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartDiscoverySessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartDiscoverySessionRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : undefined,
    };
  },

  toJSON(message: StartDiscoverySessionRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.productId !== undefined) {
      obj.productId = message.productId;
    }
    return obj;
  },
};

function createBaseStartDiscoverySessionResponse(): StartDiscoverySessionResponse {
  return { products: [], chatId: "", suggestedSearches: [], response: "", category: "" };
}

export const StartDiscoverySessionResponse: MessageFns<StartDiscoverySessionResponse> = {
  encode(message: StartDiscoverySessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.chatId !== "") {
      writer.uint32(18).string(message.chatId);
    }
    for (const v of message.suggestedSearches) {
      writer.uint32(26).string(v!);
    }
    if (message.response !== "") {
      writer.uint32(34).string(message.response);
    }
    if (message.category !== "") {
      writer.uint32(42).string(message.category);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartDiscoverySessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartDiscoverySessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chatId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.suggestedSearches.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.response = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.category = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartDiscoverySessionResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      chatId: isSet(object.chatId) ? globalThis.String(object.chatId) : "",
      suggestedSearches: globalThis.Array.isArray(object?.suggestedSearches)
        ? object.suggestedSearches.map((e: any) => globalThis.String(e))
        : [],
      response: isSet(object.response) ? globalThis.String(object.response) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
    };
  },

  toJSON(message: StartDiscoverySessionResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.chatId !== "") {
      obj.chatId = message.chatId;
    }
    if (message.suggestedSearches?.length) {
      obj.suggestedSearches = message.suggestedSearches;
    }
    if (message.response !== "") {
      obj.response = message.response;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    return obj;
  },
};

function createBaseContinueDiscoverySessionRequest(): ContinueDiscoverySessionRequest {
  return { chatId: "", productId: undefined, message: undefined };
}

export const ContinueDiscoverySessionRequest: MessageFns<ContinueDiscoverySessionRequest> = {
  encode(message: ContinueDiscoverySessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatId !== "") {
      writer.uint32(10).string(message.chatId);
    }
    if (message.productId !== undefined) {
      writer.uint32(18).string(message.productId);
    }
    if (message.message !== undefined) {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContinueDiscoverySessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinueDiscoverySessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinueDiscoverySessionRequest {
    return {
      chatId: isSet(object.chatId) ? globalThis.String(object.chatId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: ContinueDiscoverySessionRequest): unknown {
    const obj: any = {};
    if (message.chatId !== "") {
      obj.chatId = message.chatId;
    }
    if (message.productId !== undefined) {
      obj.productId = message.productId;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },
};

function createBaseContinueDiscoverySessionResponse(): ContinueDiscoverySessionResponse {
  return { products: [], suggestedSearches: [], response: "", category: "" };
}

export const ContinueDiscoverySessionResponse: MessageFns<ContinueDiscoverySessionResponse> = {
  encode(message: ContinueDiscoverySessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.suggestedSearches) {
      writer.uint32(18).string(v!);
    }
    if (message.response !== "") {
      writer.uint32(26).string(message.response);
    }
    if (message.category !== "") {
      writer.uint32(34).string(message.category);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContinueDiscoverySessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContinueDiscoverySessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.suggestedSearches.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.response = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.category = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContinueDiscoverySessionResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      suggestedSearches: globalThis.Array.isArray(object?.suggestedSearches)
        ? object.suggestedSearches.map((e: any) => globalThis.String(e))
        : [],
      response: isSet(object.response) ? globalThis.String(object.response) : "",
      category: isSet(object.category) ? globalThis.String(object.category) : "",
    };
  },

  toJSON(message: ContinueDiscoverySessionResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.suggestedSearches?.length) {
      obj.suggestedSearches = message.suggestedSearches;
    }
    if (message.response !== "") {
      obj.response = message.response;
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    return obj;
  },
};

function createBaseBookmarkProductRequest(): BookmarkProductRequest {
  return { productId: "", chatId: undefined };
}

export const BookmarkProductRequest: MessageFns<BookmarkProductRequest> = {
  encode(message: BookmarkProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.chatId !== undefined) {
      writer.uint32(18).string(message.chatId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookmarkProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookmarkProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chatId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookmarkProductRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      chatId: isSet(object.chatId) ? globalThis.String(object.chatId) : undefined,
    };
  },

  toJSON(message: BookmarkProductRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.chatId !== undefined) {
      obj.chatId = message.chatId;
    }
    return obj;
  },
};

function createBaseBookmarkProductResponse(): BookmarkProductResponse {
  return {};
}

export const BookmarkProductResponse: MessageFns<BookmarkProductResponse> = {
  encode(_: BookmarkProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookmarkProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookmarkProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): BookmarkProductResponse {
    return {};
  },

  toJSON(_: BookmarkProductResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseUnbookmarkProductRequest(): UnbookmarkProductRequest {
  return { productId: "", chatId: undefined };
}

export const UnbookmarkProductRequest: MessageFns<UnbookmarkProductRequest> = {
  encode(message: UnbookmarkProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.chatId !== undefined) {
      writer.uint32(18).string(message.chatId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnbookmarkProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnbookmarkProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chatId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnbookmarkProductRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      chatId: isSet(object.chatId) ? globalThis.String(object.chatId) : undefined,
    };
  },

  toJSON(message: UnbookmarkProductRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.chatId !== undefined) {
      obj.chatId = message.chatId;
    }
    return obj;
  },
};

function createBaseUnbookmarkProductResponse(): UnbookmarkProductResponse {
  return {};
}

export const UnbookmarkProductResponse: MessageFns<UnbookmarkProductResponse> = {
  encode(_: UnbookmarkProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnbookmarkProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnbookmarkProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UnbookmarkProductResponse {
    return {};
  },

  toJSON(_: UnbookmarkProductResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseGetBookmarkedProductIdsRequest(): GetBookmarkedProductIdsRequest {
  return { chatId: "" };
}

export const GetBookmarkedProductIdsRequest: MessageFns<GetBookmarkedProductIdsRequest> = {
  encode(message: GetBookmarkedProductIdsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatId !== "") {
      writer.uint32(10).string(message.chatId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookmarkedProductIdsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookmarkedProductIdsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookmarkedProductIdsRequest {
    return { chatId: isSet(object.chatId) ? globalThis.String(object.chatId) : "" };
  },

  toJSON(message: GetBookmarkedProductIdsRequest): unknown {
    const obj: any = {};
    if (message.chatId !== "") {
      obj.chatId = message.chatId;
    }
    return obj;
  },
};

function createBaseGetBookmarkedProductIdsResponse(): GetBookmarkedProductIdsResponse {
  return { productIds: [] };
}

export const GetBookmarkedProductIdsResponse: MessageFns<GetBookmarkedProductIdsResponse> = {
  encode(message: GetBookmarkedProductIdsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.productIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBookmarkedProductIdsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBookmarkedProductIdsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBookmarkedProductIdsResponse {
    return {
      productIds: globalThis.Array.isArray(object?.productIds)
        ? object.productIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetBookmarkedProductIdsResponse): unknown {
    const obj: any = {};
    if (message.productIds?.length) {
      obj.productIds = message.productIds;
    }
    return obj;
  },
};

function createBaseListBookmarkedProductsRequest(): ListBookmarkedProductsRequest {
  return { lastCreatedAt: undefined };
}

export const ListBookmarkedProductsRequest: MessageFns<ListBookmarkedProductsRequest> = {
  encode(message: ListBookmarkedProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastCreatedAt !== undefined) {
      writer.uint32(10).string(message.lastCreatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookmarkedProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookmarkedProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lastCreatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBookmarkedProductsRequest {
    return { lastCreatedAt: isSet(object.lastCreatedAt) ? globalThis.String(object.lastCreatedAt) : undefined };
  },

  toJSON(message: ListBookmarkedProductsRequest): unknown {
    const obj: any = {};
    if (message.lastCreatedAt !== undefined) {
      obj.lastCreatedAt = message.lastCreatedAt;
    }
    return obj;
  },
};

function createBaseListBookmarkedProductsResponse(): ListBookmarkedProductsResponse {
  return { products: [], lastCreatedAt: undefined };
}

export const ListBookmarkedProductsResponse: MessageFns<ListBookmarkedProductsResponse> = {
  encode(message: ListBookmarkedProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.lastCreatedAt !== undefined) {
      writer.uint32(18).string(message.lastCreatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookmarkedProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookmarkedProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastCreatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBookmarkedProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      lastCreatedAt: isSet(object.lastCreatedAt) ? globalThis.String(object.lastCreatedAt) : undefined,
    };
  },

  toJSON(message: ListBookmarkedProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.lastCreatedAt !== undefined) {
      obj.lastCreatedAt = message.lastCreatedAt;
    }
    return obj;
  },
};

export type DiscoveryServiceDefinition = typeof DiscoveryServiceDefinition;
export const DiscoveryServiceDefinition = {
  name: "DiscoveryService",
  fullName: "discovery.DiscoveryService",
  methods: {
    getDiscoveryProducts: {
      name: "GetDiscoveryProducts",
      requestType: GetDiscoveryProductsRequest,
      requestStream: false,
      responseType: GetDiscoveryProductsResponse,
      responseStream: false,
      options: {},
    },
    startDiscoverySession: {
      name: "StartDiscoverySession",
      requestType: StartDiscoverySessionRequest,
      requestStream: false,
      responseType: StartDiscoverySessionResponse,
      responseStream: false,
      options: {},
    },
    continueDiscoverySession: {
      name: "ContinueDiscoverySession",
      requestType: ContinueDiscoverySessionRequest,
      requestStream: false,
      responseType: ContinueDiscoverySessionResponse,
      responseStream: false,
      options: {},
    },
    bookmarkProduct: {
      name: "BookmarkProduct",
      requestType: BookmarkProductRequest,
      requestStream: false,
      responseType: BookmarkProductResponse,
      responseStream: false,
      options: {},
    },
    unbookmarkProduct: {
      name: "UnbookmarkProduct",
      requestType: UnbookmarkProductRequest,
      requestStream: false,
      responseType: UnbookmarkProductResponse,
      responseStream: false,
      options: {},
    },
    getBookmarkedProductIds: {
      name: "GetBookmarkedProductIds",
      requestType: GetBookmarkedProductIdsRequest,
      requestStream: false,
      responseType: GetBookmarkedProductIdsResponse,
      responseStream: false,
      options: {},
    },
    listBookmarkedProducts: {
      name: "ListBookmarkedProducts",
      requestType: ListBookmarkedProductsRequest,
      requestStream: false,
      responseType: ListBookmarkedProductsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface DiscoveryServiceImplementation<CallContextExt = {}> {
  getDiscoveryProducts(
    request: GetDiscoveryProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<GetDiscoveryProductsResponse>;
  startDiscoverySession(
    request: StartDiscoverySessionRequest,
    context: CallContext & CallContextExt,
  ): Promise<StartDiscoverySessionResponse>;
  continueDiscoverySession(
    request: ContinueDiscoverySessionRequest,
    context: CallContext & CallContextExt,
  ): Promise<ContinueDiscoverySessionResponse>;
  bookmarkProduct(
    request: BookmarkProductRequest,
    context: CallContext & CallContextExt,
  ): Promise<BookmarkProductResponse>;
  unbookmarkProduct(
    request: UnbookmarkProductRequest,
    context: CallContext & CallContextExt,
  ): Promise<UnbookmarkProductResponse>;
  getBookmarkedProductIds(
    request: GetBookmarkedProductIdsRequest,
    context: CallContext & CallContextExt,
  ): Promise<GetBookmarkedProductIdsResponse>;
  listBookmarkedProducts(
    request: ListBookmarkedProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<ListBookmarkedProductsResponse>;
}

export interface DiscoveryServiceClient<CallOptionsExt = {}> {
  getDiscoveryProducts(
    request: GetDiscoveryProductsRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDiscoveryProductsResponse>;
  startDiscoverySession(
    request: StartDiscoverySessionRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StartDiscoverySessionResponse>;
  continueDiscoverySession(
    request: ContinueDiscoverySessionRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ContinueDiscoverySessionResponse>;
  bookmarkProduct(
    request: BookmarkProductRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BookmarkProductResponse>;
  unbookmarkProduct(
    request: UnbookmarkProductRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnbookmarkProductResponse>;
  getBookmarkedProductIds(
    request: GetBookmarkedProductIdsRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetBookmarkedProductIdsResponse>;
  listBookmarkedProducts(
    request: ListBookmarkedProductsRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListBookmarkedProductsResponse>;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
