// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.3
// source: mock/mock.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Product } from "../base/base";

export const protobufPackage = "mock";

export interface GetMockProductsRequest {
  count: number;
}

export interface GetMockProductsResponse {
  products: Product[];
}

function createBaseGetMockProductsRequest(): GetMockProductsRequest {
  return { count: 0 };
}

export const GetMockProductsRequest: MessageFns<GetMockProductsRequest> = {
  encode(message: GetMockProductsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.count !== 0) {
      writer.uint32(8).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMockProductsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMockProductsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMockProductsRequest {
    return { count: isSet(object.count) ? globalThis.Number(object.count) : 0 };
  },

  toJSON(message: GetMockProductsRequest): unknown {
    const obj: any = {};
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },
};

function createBaseGetMockProductsResponse(): GetMockProductsResponse {
  return { products: [] };
}

export const GetMockProductsResponse: MessageFns<GetMockProductsResponse> = {
  encode(message: GetMockProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMockProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMockProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMockProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetMockProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },
};

export type MockServiceDefinition = typeof MockServiceDefinition;
export const MockServiceDefinition = {
  name: "MockService",
  fullName: "mock.MockService",
  methods: {
    getMockProducts: {
      name: "GetMockProducts",
      requestType: GetMockProductsRequest,
      requestStream: false,
      responseType: GetMockProductsResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface MockServiceImplementation<CallContextExt = {}> {
  getMockProducts(
    request: GetMockProductsRequest,
    context: CallContext & CallContextExt,
  ): Promise<GetMockProductsResponse>;
}

export interface MockServiceClient<CallOptionsExt = {}> {
  getMockProducts(
    request: GetMockProductsRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetMockProductsResponse>;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
