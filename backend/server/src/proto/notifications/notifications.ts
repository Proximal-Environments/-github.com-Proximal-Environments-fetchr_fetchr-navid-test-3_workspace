// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.3
// source: notifications/notifications.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "notifications";

export enum DevicePlatform {
  DEVICE_PLATFORM_UNSPECIFIED = 0,
  DEVICE_PLATFORM_IOS = 1,
  DEVICE_PLATFORM_ANDROID = 2,
  DEVICE_PLATFORM_WEB = 3,
  UNRECOGNIZED = -1,
}

export function devicePlatformFromJSON(object: any): DevicePlatform {
  switch (object) {
    case 0:
    case "DEVICE_PLATFORM_UNSPECIFIED":
      return DevicePlatform.DEVICE_PLATFORM_UNSPECIFIED;
    case 1:
    case "DEVICE_PLATFORM_IOS":
      return DevicePlatform.DEVICE_PLATFORM_IOS;
    case 2:
    case "DEVICE_PLATFORM_ANDROID":
      return DevicePlatform.DEVICE_PLATFORM_ANDROID;
    case 3:
    case "DEVICE_PLATFORM_WEB":
      return DevicePlatform.DEVICE_PLATFORM_WEB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DevicePlatform.UNRECOGNIZED;
  }
}

export function devicePlatformToJSON(object: DevicePlatform): string {
  switch (object) {
    case DevicePlatform.DEVICE_PLATFORM_UNSPECIFIED:
      return "DEVICE_PLATFORM_UNSPECIFIED";
    case DevicePlatform.DEVICE_PLATFORM_IOS:
      return "DEVICE_PLATFORM_IOS";
    case DevicePlatform.DEVICE_PLATFORM_ANDROID:
      return "DEVICE_PLATFORM_ANDROID";
    case DevicePlatform.DEVICE_PLATFORM_WEB:
      return "DEVICE_PLATFORM_WEB";
    case DevicePlatform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UserDevice {
  id: string;
  userId: string;
  deviceToken: string;
  platform: DevicePlatform;
  isActive: boolean;
  createdAt: number;
  updatedAt: number;
}

export interface RegisterDeviceRequest {
  userId: string;
  deviceToken: string;
  platform: DevicePlatform;
}

export interface RegisterDeviceResponse {
  device: UserDevice | undefined;
}

export interface UnregisterDeviceRequest {
  deviceToken: string;
  userId?: string | undefined;
}

export interface UnregisterDeviceResponse {
  success: boolean;
}

export interface ListUserDevicesRequest {
  userId: string;
}

export interface ListUserDevicesResponse {
  devices: UserDevice[];
}

export interface SendNotificationRequest {
  userId: string;
  title: string;
  body: string;
  deepLink?: string | undefined;
  data: { [key: string]: string };
}

export interface SendNotificationRequest_DataEntry {
  key: string;
  value: string;
}

export interface SendNotificationResponse {
  success: boolean;
  successfulDevices: number;
  failedDevices: number;
  failedDeviceTokens: string[];
}

export interface CheckDeviceNotificationStatusRequest {
  deviceToken: string;
  userId: string;
}

export interface CheckDeviceNotificationStatusResponse {
  isRegistered: boolean;
  lastActivityTimestamp: number;
}

function createBaseUserDevice(): UserDevice {
  return { id: "", userId: "", deviceToken: "", platform: 0, isActive: false, createdAt: 0, updatedAt: 0 };
}

export const UserDevice: MessageFns<UserDevice> = {
  encode(message: UserDevice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.deviceToken !== "") {
      writer.uint32(26).string(message.deviceToken);
    }
    if (message.platform !== 0) {
      writer.uint32(32).int32(message.platform);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    if (message.createdAt !== 0) {
      writer.uint32(48).int64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(56).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserDevice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deviceToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.updatedAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserDevice {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      deviceToken: isSet(object.deviceToken) ? globalThis.String(object.deviceToken) : "",
      platform: isSet(object.platform) ? devicePlatformFromJSON(object.platform) : 0,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: UserDevice): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.deviceToken !== "") {
      obj.deviceToken = message.deviceToken;
    }
    if (message.platform !== 0) {
      obj.platform = devicePlatformToJSON(message.platform);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },
};

function createBaseRegisterDeviceRequest(): RegisterDeviceRequest {
  return { userId: "", deviceToken: "", platform: 0 };
}

export const RegisterDeviceRequest: MessageFns<RegisterDeviceRequest> = {
  encode(message: RegisterDeviceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.deviceToken !== "") {
      writer.uint32(18).string(message.deviceToken);
    }
    if (message.platform !== 0) {
      writer.uint32(24).int32(message.platform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterDeviceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterDeviceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deviceToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterDeviceRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      deviceToken: isSet(object.deviceToken) ? globalThis.String(object.deviceToken) : "",
      platform: isSet(object.platform) ? devicePlatformFromJSON(object.platform) : 0,
    };
  },

  toJSON(message: RegisterDeviceRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.deviceToken !== "") {
      obj.deviceToken = message.deviceToken;
    }
    if (message.platform !== 0) {
      obj.platform = devicePlatformToJSON(message.platform);
    }
    return obj;
  },
};

function createBaseRegisterDeviceResponse(): RegisterDeviceResponse {
  return { device: undefined };
}

export const RegisterDeviceResponse: MessageFns<RegisterDeviceResponse> = {
  encode(message: RegisterDeviceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.device !== undefined) {
      UserDevice.encode(message.device, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterDeviceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterDeviceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.device = UserDevice.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterDeviceResponse {
    return { device: isSet(object.device) ? UserDevice.fromJSON(object.device) : undefined };
  },

  toJSON(message: RegisterDeviceResponse): unknown {
    const obj: any = {};
    if (message.device !== undefined) {
      obj.device = UserDevice.toJSON(message.device);
    }
    return obj;
  },
};

function createBaseUnregisterDeviceRequest(): UnregisterDeviceRequest {
  return { deviceToken: "", userId: undefined };
}

export const UnregisterDeviceRequest: MessageFns<UnregisterDeviceRequest> = {
  encode(message: UnregisterDeviceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceToken !== "") {
      writer.uint32(10).string(message.deviceToken);
    }
    if (message.userId !== undefined) {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnregisterDeviceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnregisterDeviceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnregisterDeviceRequest {
    return {
      deviceToken: isSet(object.deviceToken) ? globalThis.String(object.deviceToken) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined,
    };
  },

  toJSON(message: UnregisterDeviceRequest): unknown {
    const obj: any = {};
    if (message.deviceToken !== "") {
      obj.deviceToken = message.deviceToken;
    }
    if (message.userId !== undefined) {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseUnregisterDeviceResponse(): UnregisterDeviceResponse {
  return { success: false };
}

export const UnregisterDeviceResponse: MessageFns<UnregisterDeviceResponse> = {
  encode(message: UnregisterDeviceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnregisterDeviceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnregisterDeviceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnregisterDeviceResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UnregisterDeviceResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },
};

function createBaseListUserDevicesRequest(): ListUserDevicesRequest {
  return { userId: "" };
}

export const ListUserDevicesRequest: MessageFns<ListUserDevicesRequest> = {
  encode(message: ListUserDevicesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserDevicesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserDevicesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserDevicesRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ListUserDevicesRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseListUserDevicesResponse(): ListUserDevicesResponse {
  return { devices: [] };
}

export const ListUserDevicesResponse: MessageFns<ListUserDevicesResponse> = {
  encode(message: ListUserDevicesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.devices) {
      UserDevice.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserDevicesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserDevicesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.devices.push(UserDevice.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserDevicesResponse {
    return {
      devices: globalThis.Array.isArray(object?.devices) ? object.devices.map((e: any) => UserDevice.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListUserDevicesResponse): unknown {
    const obj: any = {};
    if (message.devices?.length) {
      obj.devices = message.devices.map((e) => UserDevice.toJSON(e));
    }
    return obj;
  },
};

function createBaseSendNotificationRequest(): SendNotificationRequest {
  return { userId: "", title: "", body: "", deepLink: undefined, data: {} };
}

export const SendNotificationRequest: MessageFns<SendNotificationRequest> = {
  encode(message: SendNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.body !== "") {
      writer.uint32(26).string(message.body);
    }
    if (message.deepLink !== undefined) {
      writer.uint32(34).string(message.deepLink);
    }
    Object.entries(message.data).forEach(([key, value]) => {
      SendNotificationRequest_DataEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deepLink = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = SendNotificationRequest_DataEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.data[entry5.key] = entry5.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendNotificationRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      deepLink: isSet(object.deepLink) ? globalThis.String(object.deepLink) : undefined,
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SendNotificationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.deepLink !== undefined) {
      obj.deepLink = message.deepLink;
    }
    if (message.data) {
      const entries = Object.entries(message.data);
      if (entries.length > 0) {
        obj.data = {};
        entries.forEach(([k, v]) => {
          obj.data[k] = v;
        });
      }
    }
    return obj;
  },
};

function createBaseSendNotificationRequest_DataEntry(): SendNotificationRequest_DataEntry {
  return { key: "", value: "" };
}

export const SendNotificationRequest_DataEntry: MessageFns<SendNotificationRequest_DataEntry> = {
  encode(message: SendNotificationRequest_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendNotificationRequest_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendNotificationRequest_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendNotificationRequest_DataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SendNotificationRequest_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseSendNotificationResponse(): SendNotificationResponse {
  return { success: false, successfulDevices: 0, failedDevices: 0, failedDeviceTokens: [] };
}

export const SendNotificationResponse: MessageFns<SendNotificationResponse> = {
  encode(message: SendNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.successfulDevices !== 0) {
      writer.uint32(16).int32(message.successfulDevices);
    }
    if (message.failedDevices !== 0) {
      writer.uint32(24).int32(message.failedDevices);
    }
    for (const v of message.failedDeviceTokens) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.successfulDevices = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.failedDevices = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.failedDeviceTokens.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendNotificationResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      successfulDevices: isSet(object.successfulDevices) ? globalThis.Number(object.successfulDevices) : 0,
      failedDevices: isSet(object.failedDevices) ? globalThis.Number(object.failedDevices) : 0,
      failedDeviceTokens: globalThis.Array.isArray(object?.failedDeviceTokens)
        ? object.failedDeviceTokens.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SendNotificationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.successfulDevices !== 0) {
      obj.successfulDevices = Math.round(message.successfulDevices);
    }
    if (message.failedDevices !== 0) {
      obj.failedDevices = Math.round(message.failedDevices);
    }
    if (message.failedDeviceTokens?.length) {
      obj.failedDeviceTokens = message.failedDeviceTokens;
    }
    return obj;
  },
};

function createBaseCheckDeviceNotificationStatusRequest(): CheckDeviceNotificationStatusRequest {
  return { deviceToken: "", userId: "" };
}

export const CheckDeviceNotificationStatusRequest: MessageFns<CheckDeviceNotificationStatusRequest> = {
  encode(message: CheckDeviceNotificationStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceToken !== "") {
      writer.uint32(10).string(message.deviceToken);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckDeviceNotificationStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckDeviceNotificationStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckDeviceNotificationStatusRequest {
    return {
      deviceToken: isSet(object.deviceToken) ? globalThis.String(object.deviceToken) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CheckDeviceNotificationStatusRequest): unknown {
    const obj: any = {};
    if (message.deviceToken !== "") {
      obj.deviceToken = message.deviceToken;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseCheckDeviceNotificationStatusResponse(): CheckDeviceNotificationStatusResponse {
  return { isRegistered: false, lastActivityTimestamp: 0 };
}

export const CheckDeviceNotificationStatusResponse: MessageFns<CheckDeviceNotificationStatusResponse> = {
  encode(message: CheckDeviceNotificationStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isRegistered !== false) {
      writer.uint32(8).bool(message.isRegistered);
    }
    if (message.lastActivityTimestamp !== 0) {
      writer.uint32(16).int64(message.lastActivityTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckDeviceNotificationStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckDeviceNotificationStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isRegistered = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastActivityTimestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckDeviceNotificationStatusResponse {
    return {
      isRegistered: isSet(object.isRegistered) ? globalThis.Boolean(object.isRegistered) : false,
      lastActivityTimestamp: isSet(object.lastActivityTimestamp) ? globalThis.Number(object.lastActivityTimestamp) : 0,
    };
  },

  toJSON(message: CheckDeviceNotificationStatusResponse): unknown {
    const obj: any = {};
    if (message.isRegistered !== false) {
      obj.isRegistered = message.isRegistered;
    }
    if (message.lastActivityTimestamp !== 0) {
      obj.lastActivityTimestamp = Math.round(message.lastActivityTimestamp);
    }
    return obj;
  },
};

export type NotificationsServiceDefinition = typeof NotificationsServiceDefinition;
export const NotificationsServiceDefinition = {
  name: "NotificationsService",
  fullName: "notifications.NotificationsService",
  methods: {
    registerDevice: {
      name: "RegisterDevice",
      requestType: RegisterDeviceRequest,
      requestStream: false,
      responseType: RegisterDeviceResponse,
      responseStream: false,
      options: {},
    },
    unregisterDevice: {
      name: "UnregisterDevice",
      requestType: UnregisterDeviceRequest,
      requestStream: false,
      responseType: UnregisterDeviceResponse,
      responseStream: false,
      options: {},
    },
    listUserDevices: {
      name: "ListUserDevices",
      requestType: ListUserDevicesRequest,
      requestStream: false,
      responseType: ListUserDevicesResponse,
      responseStream: false,
      options: {},
    },
    checkDeviceNotificationStatus: {
      name: "CheckDeviceNotificationStatus",
      requestType: CheckDeviceNotificationStatusRequest,
      requestStream: false,
      responseType: CheckDeviceNotificationStatusResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface NotificationsServiceImplementation<CallContextExt = {}> {
  registerDevice(
    request: RegisterDeviceRequest,
    context: CallContext & CallContextExt,
  ): Promise<RegisterDeviceResponse>;
  unregisterDevice(
    request: UnregisterDeviceRequest,
    context: CallContext & CallContextExt,
  ): Promise<UnregisterDeviceResponse>;
  listUserDevices(
    request: ListUserDevicesRequest,
    context: CallContext & CallContextExt,
  ): Promise<ListUserDevicesResponse>;
  checkDeviceNotificationStatus(
    request: CheckDeviceNotificationStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<CheckDeviceNotificationStatusResponse>;
}

export interface NotificationsServiceClient<CallOptionsExt = {}> {
  registerDevice(
    request: RegisterDeviceRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegisterDeviceResponse>;
  unregisterDevice(
    request: UnregisterDeviceRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnregisterDeviceResponse>;
  listUserDevices(
    request: ListUserDevicesRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListUserDevicesResponse>;
  checkDeviceNotificationStatus(
    request: CheckDeviceNotificationStatusRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CheckDeviceNotificationStatusResponse>;
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
