// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.3
// source: user/user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import {
  DiscoveryMethod,
  discoveryMethodFromJSON,
  discoveryMethodToJSON,
  Gender,
  genderFromJSON,
  genderToJSON,
  UserAddress,
  UserProfile,
  UserRole,
  userRoleFromJSON,
  userRoleToJSON,
  UserSizing,
  WhatBringsYouToFetchr,
  whatBringsYouToFetchrFromJSON,
  whatBringsYouToFetchrToJSON,
} from "../base/base";
import { PaymentMethodStatus, paymentMethodStatusFromJSON, paymentMethodStatusToJSON } from "../base/user_billing";

export const protobufPackage = "user";

export interface CreateUserProfileRequest {
  userId: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  gender?: Gender | undefined;
}

export interface CreateUserProfileResponse {
  userProfile: UserProfile | undefined;
}

export interface GetUserProfileRequest {
  userId: string;
}

export interface GetUserProfileResponse {
  userProfile: UserProfile | undefined;
}

export interface UpdateUserProfileRequest {
  userId: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  gender?: Gender | undefined;
  userSizing?: UserSizing | undefined;
  onboardingCompleted?: boolean | undefined;
  age?: number | undefined;
  height?: number | undefined;
  weight?: number | undefined;
  address?: UserAddress | undefined;
  role?: UserRole | undefined;
  brandsSelected: string[];
  discoveryMethod?: DiscoveryMethod | undefined;
  styleImageUrls: string[];
  instagramHandle?: string | undefined;
  generatedBio?: string | undefined;
  paymentMethodStatus?: PaymentMethodStatus | undefined;
  whatBringsYouToFetchr?: WhatBringsYouToFetchr | undefined;
  stylePickerProductIds: string[];
  preferencesAndQuirks?: string | undefined;
  selfonboardedGeneratedStyleDescription?: string | undefined;
}

export interface UpdateUserProfileResponse {
  userProfile: UserProfile | undefined;
}

export interface SetUserPushNotificationsTokenRequest {
  userId: string;
  token?: string | undefined;
}

export interface SetUserPushNotificationsTokenResponse {
}

export interface ListProfilesRequest {
  count?: number | undefined;
}

export interface ListProfilesResponse {
  userProfiles: UserProfile[];
}

export interface UpdateStripeCustomerIdRequest {
  userId: string;
  stripeCustomerId?: string | undefined;
}

export interface UpdateStripeCustomerIdResponse {
}

export interface SendOnboardingNotificationRequest {
}

export interface SendOnboardingNotificationResponse {
}

export interface DeleteUserRequest {
  userId?: string | undefined;
}

export interface DeleteUserResponse {
}

export interface UploadWardrobePicturesRequest {
  userId: string;
  pictures: Uint8Array[];
}

export interface UploadWardrobePicturesResponse {
  success: boolean;
}

export interface AnalyzeUserStyleRequest {
  userId: string;
}

export interface AnalyzeUserStyleResponse {
  coreBrands: string[];
  brandAnalysis: string;
  styleAnalysis: string;
  coreStickers: string[];
  preferencesAnalysis?: string | undefined;
}

function createBaseCreateUserProfileRequest(): CreateUserProfileRequest {
  return { userId: "", firstName: undefined, lastName: undefined, gender: undefined };
}

export const CreateUserProfileRequest: MessageFns<CreateUserProfileRequest> = {
  encode(message: CreateUserProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.firstName !== undefined) {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(26).string(message.lastName);
    }
    if (message.gender !== undefined) {
      writer.uint32(32).int32(message.gender);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserProfileRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : undefined,
    };
  },

  toJSON(message: CreateUserProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    if (message.gender !== undefined) {
      obj.gender = genderToJSON(message.gender);
    }
    return obj;
  },
};

function createBaseCreateUserProfileResponse(): CreateUserProfileResponse {
  return { userProfile: undefined };
}

export const CreateUserProfileResponse: MessageFns<CreateUserProfileResponse> = {
  encode(message: CreateUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userProfile !== undefined) {
      UserProfile.encode(message.userProfile, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userProfile = UserProfile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserProfileResponse {
    return { userProfile: isSet(object.userProfile) ? UserProfile.fromJSON(object.userProfile) : undefined };
  },

  toJSON(message: CreateUserProfileResponse): unknown {
    const obj: any = {};
    if (message.userProfile !== undefined) {
      obj.userProfile = UserProfile.toJSON(message.userProfile);
    }
    return obj;
  },
};

function createBaseGetUserProfileRequest(): GetUserProfileRequest {
  return { userId: "" };
}

export const GetUserProfileRequest: MessageFns<GetUserProfileRequest> = {
  encode(message: GetUserProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserProfileRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetUserProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseGetUserProfileResponse(): GetUserProfileResponse {
  return { userProfile: undefined };
}

export const GetUserProfileResponse: MessageFns<GetUserProfileResponse> = {
  encode(message: GetUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userProfile !== undefined) {
      UserProfile.encode(message.userProfile, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userProfile = UserProfile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserProfileResponse {
    return { userProfile: isSet(object.userProfile) ? UserProfile.fromJSON(object.userProfile) : undefined };
  },

  toJSON(message: GetUserProfileResponse): unknown {
    const obj: any = {};
    if (message.userProfile !== undefined) {
      obj.userProfile = UserProfile.toJSON(message.userProfile);
    }
    return obj;
  },
};

function createBaseUpdateUserProfileRequest(): UpdateUserProfileRequest {
  return {
    userId: "",
    firstName: undefined,
    lastName: undefined,
    gender: undefined,
    userSizing: undefined,
    onboardingCompleted: undefined,
    age: undefined,
    height: undefined,
    weight: undefined,
    address: undefined,
    role: undefined,
    brandsSelected: [],
    discoveryMethod: undefined,
    styleImageUrls: [],
    instagramHandle: undefined,
    generatedBio: undefined,
    paymentMethodStatus: undefined,
    whatBringsYouToFetchr: undefined,
    stylePickerProductIds: [],
    preferencesAndQuirks: undefined,
    selfonboardedGeneratedStyleDescription: undefined,
  };
}

export const UpdateUserProfileRequest: MessageFns<UpdateUserProfileRequest> = {
  encode(message: UpdateUserProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.firstName !== undefined) {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(26).string(message.lastName);
    }
    if (message.gender !== undefined) {
      writer.uint32(32).int32(message.gender);
    }
    if (message.userSizing !== undefined) {
      UserSizing.encode(message.userSizing, writer.uint32(42).fork()).join();
    }
    if (message.onboardingCompleted !== undefined) {
      writer.uint32(48).bool(message.onboardingCompleted);
    }
    if (message.age !== undefined) {
      writer.uint32(56).int32(message.age);
    }
    if (message.height !== undefined) {
      writer.uint32(64).int32(message.height);
    }
    if (message.weight !== undefined) {
      writer.uint32(72).int32(message.weight);
    }
    if (message.address !== undefined) {
      UserAddress.encode(message.address, writer.uint32(82).fork()).join();
    }
    if (message.role !== undefined) {
      writer.uint32(88).int32(message.role);
    }
    for (const v of message.brandsSelected) {
      writer.uint32(98).string(v!);
    }
    if (message.discoveryMethod !== undefined) {
      writer.uint32(104).int32(message.discoveryMethod);
    }
    for (const v of message.styleImageUrls) {
      writer.uint32(114).string(v!);
    }
    if (message.instagramHandle !== undefined) {
      writer.uint32(130).string(message.instagramHandle);
    }
    if (message.generatedBio !== undefined) {
      writer.uint32(138).string(message.generatedBio);
    }
    if (message.paymentMethodStatus !== undefined) {
      writer.uint32(144).int32(message.paymentMethodStatus);
    }
    if (message.whatBringsYouToFetchr !== undefined) {
      writer.uint32(152).int32(message.whatBringsYouToFetchr);
    }
    for (const v of message.stylePickerProductIds) {
      writer.uint32(162).string(v!);
    }
    if (message.preferencesAndQuirks !== undefined) {
      writer.uint32(170).string(message.preferencesAndQuirks);
    }
    if (message.selfonboardedGeneratedStyleDescription !== undefined) {
      writer.uint32(178).string(message.selfonboardedGeneratedStyleDescription);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userSizing = UserSizing.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.onboardingCompleted = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.weight = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.address = UserAddress.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.role = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.brandsSelected.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.discoveryMethod = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.styleImageUrls.push(reader.string());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.instagramHandle = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.generatedBio = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.paymentMethodStatus = reader.int32() as any;
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.whatBringsYouToFetchr = reader.int32() as any;
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.stylePickerProductIds.push(reader.string());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.preferencesAndQuirks = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.selfonboardedGeneratedStyleDescription = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserProfileRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
      gender: isSet(object.gender) ? genderFromJSON(object.gender) : undefined,
      userSizing: isSet(object.userSizing) ? UserSizing.fromJSON(object.userSizing) : undefined,
      onboardingCompleted: isSet(object.onboardingCompleted)
        ? globalThis.Boolean(object.onboardingCompleted)
        : undefined,
      age: isSet(object.age) ? globalThis.Number(object.age) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
      address: isSet(object.address) ? UserAddress.fromJSON(object.address) : undefined,
      role: isSet(object.role) ? userRoleFromJSON(object.role) : undefined,
      brandsSelected: globalThis.Array.isArray(object?.brandsSelected)
        ? object.brandsSelected.map((e: any) => globalThis.String(e))
        : [],
      discoveryMethod: isSet(object.discoveryMethod) ? discoveryMethodFromJSON(object.discoveryMethod) : undefined,
      styleImageUrls: globalThis.Array.isArray(object?.styleImageUrls)
        ? object.styleImageUrls.map((e: any) => globalThis.String(e))
        : [],
      instagramHandle: isSet(object.instagramHandle) ? globalThis.String(object.instagramHandle) : undefined,
      generatedBio: isSet(object.generatedBio) ? globalThis.String(object.generatedBio) : undefined,
      paymentMethodStatus: isSet(object.paymentMethodStatus)
        ? paymentMethodStatusFromJSON(object.paymentMethodStatus)
        : undefined,
      whatBringsYouToFetchr: isSet(object.whatBringsYouToFetchr)
        ? whatBringsYouToFetchrFromJSON(object.whatBringsYouToFetchr)
        : undefined,
      stylePickerProductIds: globalThis.Array.isArray(object?.stylePickerProductIds)
        ? object.stylePickerProductIds.map((e: any) => globalThis.String(e))
        : [],
      preferencesAndQuirks: isSet(object.preferencesAndQuirks)
        ? globalThis.String(object.preferencesAndQuirks)
        : undefined,
      selfonboardedGeneratedStyleDescription: isSet(object.selfonboardedGeneratedStyleDescription)
        ? globalThis.String(object.selfonboardedGeneratedStyleDescription)
        : undefined,
    };
  },

  toJSON(message: UpdateUserProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    if (message.gender !== undefined) {
      obj.gender = genderToJSON(message.gender);
    }
    if (message.userSizing !== undefined) {
      obj.userSizing = UserSizing.toJSON(message.userSizing);
    }
    if (message.onboardingCompleted !== undefined) {
      obj.onboardingCompleted = message.onboardingCompleted;
    }
    if (message.age !== undefined) {
      obj.age = Math.round(message.age);
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    if (message.weight !== undefined) {
      obj.weight = Math.round(message.weight);
    }
    if (message.address !== undefined) {
      obj.address = UserAddress.toJSON(message.address);
    }
    if (message.role !== undefined) {
      obj.role = userRoleToJSON(message.role);
    }
    if (message.brandsSelected?.length) {
      obj.brandsSelected = message.brandsSelected;
    }
    if (message.discoveryMethod !== undefined) {
      obj.discoveryMethod = discoveryMethodToJSON(message.discoveryMethod);
    }
    if (message.styleImageUrls?.length) {
      obj.styleImageUrls = message.styleImageUrls;
    }
    if (message.instagramHandle !== undefined) {
      obj.instagramHandle = message.instagramHandle;
    }
    if (message.generatedBio !== undefined) {
      obj.generatedBio = message.generatedBio;
    }
    if (message.paymentMethodStatus !== undefined) {
      obj.paymentMethodStatus = paymentMethodStatusToJSON(message.paymentMethodStatus);
    }
    if (message.whatBringsYouToFetchr !== undefined) {
      obj.whatBringsYouToFetchr = whatBringsYouToFetchrToJSON(message.whatBringsYouToFetchr);
    }
    if (message.stylePickerProductIds?.length) {
      obj.stylePickerProductIds = message.stylePickerProductIds;
    }
    if (message.preferencesAndQuirks !== undefined) {
      obj.preferencesAndQuirks = message.preferencesAndQuirks;
    }
    if (message.selfonboardedGeneratedStyleDescription !== undefined) {
      obj.selfonboardedGeneratedStyleDescription = message.selfonboardedGeneratedStyleDescription;
    }
    return obj;
  },
};

function createBaseUpdateUserProfileResponse(): UpdateUserProfileResponse {
  return { userProfile: undefined };
}

export const UpdateUserProfileResponse: MessageFns<UpdateUserProfileResponse> = {
  encode(message: UpdateUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userProfile !== undefined) {
      UserProfile.encode(message.userProfile, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userProfile = UserProfile.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserProfileResponse {
    return { userProfile: isSet(object.userProfile) ? UserProfile.fromJSON(object.userProfile) : undefined };
  },

  toJSON(message: UpdateUserProfileResponse): unknown {
    const obj: any = {};
    if (message.userProfile !== undefined) {
      obj.userProfile = UserProfile.toJSON(message.userProfile);
    }
    return obj;
  },
};

function createBaseSetUserPushNotificationsTokenRequest(): SetUserPushNotificationsTokenRequest {
  return { userId: "", token: undefined };
}

export const SetUserPushNotificationsTokenRequest: MessageFns<SetUserPushNotificationsTokenRequest> = {
  encode(message: SetUserPushNotificationsTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.token !== undefined) {
      writer.uint32(18).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUserPushNotificationsTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserPushNotificationsTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUserPushNotificationsTokenRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : undefined,
    };
  },

  toJSON(message: SetUserPushNotificationsTokenRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.token !== undefined) {
      obj.token = message.token;
    }
    return obj;
  },
};

function createBaseSetUserPushNotificationsTokenResponse(): SetUserPushNotificationsTokenResponse {
  return {};
}

export const SetUserPushNotificationsTokenResponse: MessageFns<SetUserPushNotificationsTokenResponse> = {
  encode(_: SetUserPushNotificationsTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetUserPushNotificationsTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserPushNotificationsTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetUserPushNotificationsTokenResponse {
    return {};
  },

  toJSON(_: SetUserPushNotificationsTokenResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseListProfilesRequest(): ListProfilesRequest {
  return { count: undefined };
}

export const ListProfilesRequest: MessageFns<ListProfilesRequest> = {
  encode(message: ListProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.count !== undefined) {
      writer.uint32(8).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProfilesRequest {
    return { count: isSet(object.count) ? globalThis.Number(object.count) : undefined };
  },

  toJSON(message: ListProfilesRequest): unknown {
    const obj: any = {};
    if (message.count !== undefined) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },
};

function createBaseListProfilesResponse(): ListProfilesResponse {
  return { userProfiles: [] };
}

export const ListProfilesResponse: MessageFns<ListProfilesResponse> = {
  encode(message: ListProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.userProfiles) {
      UserProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userProfiles.push(UserProfile.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProfilesResponse {
    return {
      userProfiles: globalThis.Array.isArray(object?.userProfiles)
        ? object.userProfiles.map((e: any) => UserProfile.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListProfilesResponse): unknown {
    const obj: any = {};
    if (message.userProfiles?.length) {
      obj.userProfiles = message.userProfiles.map((e) => UserProfile.toJSON(e));
    }
    return obj;
  },
};

function createBaseUpdateStripeCustomerIdRequest(): UpdateStripeCustomerIdRequest {
  return { userId: "", stripeCustomerId: undefined };
}

export const UpdateStripeCustomerIdRequest: MessageFns<UpdateStripeCustomerIdRequest> = {
  encode(message: UpdateStripeCustomerIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.stripeCustomerId !== undefined) {
      writer.uint32(18).string(message.stripeCustomerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStripeCustomerIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStripeCustomerIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stripeCustomerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStripeCustomerIdRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      stripeCustomerId: isSet(object.stripeCustomerId) ? globalThis.String(object.stripeCustomerId) : undefined,
    };
  },

  toJSON(message: UpdateStripeCustomerIdRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.stripeCustomerId !== undefined) {
      obj.stripeCustomerId = message.stripeCustomerId;
    }
    return obj;
  },
};

function createBaseUpdateStripeCustomerIdResponse(): UpdateStripeCustomerIdResponse {
  return {};
}

export const UpdateStripeCustomerIdResponse: MessageFns<UpdateStripeCustomerIdResponse> = {
  encode(_: UpdateStripeCustomerIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStripeCustomerIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStripeCustomerIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateStripeCustomerIdResponse {
    return {};
  },

  toJSON(_: UpdateStripeCustomerIdResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseSendOnboardingNotificationRequest(): SendOnboardingNotificationRequest {
  return {};
}

export const SendOnboardingNotificationRequest: MessageFns<SendOnboardingNotificationRequest> = {
  encode(_: SendOnboardingNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendOnboardingNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendOnboardingNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SendOnboardingNotificationRequest {
    return {};
  },

  toJSON(_: SendOnboardingNotificationRequest): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseSendOnboardingNotificationResponse(): SendOnboardingNotificationResponse {
  return {};
}

export const SendOnboardingNotificationResponse: MessageFns<SendOnboardingNotificationResponse> = {
  encode(_: SendOnboardingNotificationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendOnboardingNotificationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendOnboardingNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SendOnboardingNotificationResponse {
    return {};
  },

  toJSON(_: SendOnboardingNotificationResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseDeleteUserRequest(): DeleteUserRequest {
  return { userId: undefined };
}

export const DeleteUserRequest: MessageFns<DeleteUserRequest> = {
  encode(message: DeleteUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== undefined) {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : undefined };
  },

  toJSON(message: DeleteUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== undefined) {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseDeleteUserResponse(): DeleteUserResponse {
  return {};
}

export const DeleteUserResponse: MessageFns<DeleteUserResponse> = {
  encode(_: DeleteUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteUserResponse {
    return {};
  },

  toJSON(_: DeleteUserResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseUploadWardrobePicturesRequest(): UploadWardrobePicturesRequest {
  return { userId: "", pictures: [] };
}

export const UploadWardrobePicturesRequest: MessageFns<UploadWardrobePicturesRequest> = {
  encode(message: UploadWardrobePicturesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.pictures) {
      writer.uint32(18).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadWardrobePicturesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadWardrobePicturesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pictures.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadWardrobePicturesRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      pictures: globalThis.Array.isArray(object?.pictures) ? object.pictures.map((e: any) => bytesFromBase64(e)) : [],
    };
  },

  toJSON(message: UploadWardrobePicturesRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.pictures?.length) {
      obj.pictures = message.pictures.map((e) => base64FromBytes(e));
    }
    return obj;
  },
};

function createBaseUploadWardrobePicturesResponse(): UploadWardrobePicturesResponse {
  return { success: false };
}

export const UploadWardrobePicturesResponse: MessageFns<UploadWardrobePicturesResponse> = {
  encode(message: UploadWardrobePicturesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadWardrobePicturesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadWardrobePicturesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadWardrobePicturesResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UploadWardrobePicturesResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },
};

function createBaseAnalyzeUserStyleRequest(): AnalyzeUserStyleRequest {
  return { userId: "" };
}

export const AnalyzeUserStyleRequest: MessageFns<AnalyzeUserStyleRequest> = {
  encode(message: AnalyzeUserStyleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalyzeUserStyleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalyzeUserStyleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalyzeUserStyleRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: AnalyzeUserStyleRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseAnalyzeUserStyleResponse(): AnalyzeUserStyleResponse {
  return { coreBrands: [], brandAnalysis: "", styleAnalysis: "", coreStickers: [], preferencesAnalysis: undefined };
}

export const AnalyzeUserStyleResponse: MessageFns<AnalyzeUserStyleResponse> = {
  encode(message: AnalyzeUserStyleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.coreBrands) {
      writer.uint32(10).string(v!);
    }
    if (message.brandAnalysis !== "") {
      writer.uint32(18).string(message.brandAnalysis);
    }
    if (message.styleAnalysis !== "") {
      writer.uint32(26).string(message.styleAnalysis);
    }
    for (const v of message.coreStickers) {
      writer.uint32(34).string(v!);
    }
    if (message.preferencesAnalysis !== undefined) {
      writer.uint32(42).string(message.preferencesAnalysis);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalyzeUserStyleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalyzeUserStyleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.coreBrands.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.brandAnalysis = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.styleAnalysis = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.coreStickers.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.preferencesAnalysis = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalyzeUserStyleResponse {
    return {
      coreBrands: globalThis.Array.isArray(object?.coreBrands)
        ? object.coreBrands.map((e: any) => globalThis.String(e))
        : [],
      brandAnalysis: isSet(object.brandAnalysis) ? globalThis.String(object.brandAnalysis) : "",
      styleAnalysis: isSet(object.styleAnalysis) ? globalThis.String(object.styleAnalysis) : "",
      coreStickers: globalThis.Array.isArray(object?.coreStickers)
        ? object.coreStickers.map((e: any) => globalThis.String(e))
        : [],
      preferencesAnalysis: isSet(object.preferencesAnalysis)
        ? globalThis.String(object.preferencesAnalysis)
        : undefined,
    };
  },

  toJSON(message: AnalyzeUserStyleResponse): unknown {
    const obj: any = {};
    if (message.coreBrands?.length) {
      obj.coreBrands = message.coreBrands;
    }
    if (message.brandAnalysis !== "") {
      obj.brandAnalysis = message.brandAnalysis;
    }
    if (message.styleAnalysis !== "") {
      obj.styleAnalysis = message.styleAnalysis;
    }
    if (message.coreStickers?.length) {
      obj.coreStickers = message.coreStickers;
    }
    if (message.preferencesAnalysis !== undefined) {
      obj.preferencesAnalysis = message.preferencesAnalysis;
    }
    return obj;
  },
};

export type UserServiceDefinition = typeof UserServiceDefinition;
export const UserServiceDefinition = {
  name: "UserService",
  fullName: "user.UserService",
  methods: {
    createUserProfile: {
      name: "CreateUserProfile",
      requestType: CreateUserProfileRequest,
      requestStream: false,
      responseType: CreateUserProfileResponse,
      responseStream: false,
      options: {},
    },
    getUserProfile: {
      name: "GetUserProfile",
      requestType: GetUserProfileRequest,
      requestStream: false,
      responseType: GetUserProfileResponse,
      responseStream: false,
      options: {},
    },
    updateUserProfile: {
      name: "UpdateUserProfile",
      requestType: UpdateUserProfileRequest,
      requestStream: false,
      responseType: UpdateUserProfileResponse,
      responseStream: false,
      options: {},
    },
    setUserPushNotificationsToken: {
      name: "SetUserPushNotificationsToken",
      requestType: SetUserPushNotificationsTokenRequest,
      requestStream: false,
      responseType: SetUserPushNotificationsTokenResponse,
      responseStream: false,
      options: {},
    },
    listProfiles: {
      name: "ListProfiles",
      requestType: ListProfilesRequest,
      requestStream: false,
      responseType: ListProfilesResponse,
      responseStream: false,
      options: {},
    },
    uploadWardrobePictures: {
      name: "UploadWardrobePictures",
      requestType: UploadWardrobePicturesRequest,
      requestStream: false,
      responseType: UploadWardrobePicturesResponse,
      responseStream: false,
      options: {},
    },
    deleteUser: {
      name: "DeleteUser",
      requestType: DeleteUserRequest,
      requestStream: false,
      responseType: DeleteUserResponse,
      responseStream: false,
      options: {},
    },
    sendOnboardingNotification: {
      name: "SendOnboardingNotification",
      requestType: SendOnboardingNotificationRequest,
      requestStream: false,
      responseType: SendOnboardingNotificationResponse,
      responseStream: false,
      options: {},
    },
    updateStripeCustomerId: {
      name: "UpdateStripeCustomerId",
      requestType: UpdateStripeCustomerIdRequest,
      requestStream: false,
      responseType: UpdateStripeCustomerIdResponse,
      responseStream: false,
      options: {},
    },
    analyzeUserStyle: {
      name: "AnalyzeUserStyle",
      requestType: AnalyzeUserStyleRequest,
      requestStream: false,
      responseType: AnalyzeUserStyleResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface UserServiceImplementation<CallContextExt = {}> {
  createUserProfile(
    request: CreateUserProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<CreateUserProfileResponse>;
  getUserProfile(
    request: GetUserProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<GetUserProfileResponse>;
  updateUserProfile(
    request: UpdateUserProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<UpdateUserProfileResponse>;
  setUserPushNotificationsToken(
    request: SetUserPushNotificationsTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<SetUserPushNotificationsTokenResponse>;
  listProfiles(request: ListProfilesRequest, context: CallContext & CallContextExt): Promise<ListProfilesResponse>;
  uploadWardrobePictures(
    request: UploadWardrobePicturesRequest,
    context: CallContext & CallContextExt,
  ): Promise<UploadWardrobePicturesResponse>;
  deleteUser(request: DeleteUserRequest, context: CallContext & CallContextExt): Promise<DeleteUserResponse>;
  sendOnboardingNotification(
    request: SendOnboardingNotificationRequest,
    context: CallContext & CallContextExt,
  ): Promise<SendOnboardingNotificationResponse>;
  updateStripeCustomerId(
    request: UpdateStripeCustomerIdRequest,
    context: CallContext & CallContextExt,
  ): Promise<UpdateStripeCustomerIdResponse>;
  analyzeUserStyle(
    request: AnalyzeUserStyleRequest,
    context: CallContext & CallContextExt,
  ): Promise<AnalyzeUserStyleResponse>;
}

export interface UserServiceClient<CallOptionsExt = {}> {
  createUserProfile(
    request: CreateUserProfileRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateUserProfileResponse>;
  getUserProfile(
    request: GetUserProfileRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetUserProfileResponse>;
  updateUserProfile(
    request: UpdateUserProfileRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateUserProfileResponse>;
  setUserPushNotificationsToken(
    request: SetUserPushNotificationsTokenRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetUserPushNotificationsTokenResponse>;
  listProfiles(request: ListProfilesRequest, options?: CallOptions & CallOptionsExt): Promise<ListProfilesResponse>;
  uploadWardrobePictures(
    request: UploadWardrobePicturesRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UploadWardrobePicturesResponse>;
  deleteUser(request: DeleteUserRequest, options?: CallOptions & CallOptionsExt): Promise<DeleteUserResponse>;
  sendOnboardingNotification(
    request: SendOnboardingNotificationRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SendOnboardingNotificationResponse>;
  updateStripeCustomerId(
    request: UpdateStripeCustomerIdRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateStripeCustomerIdResponse>;
  analyzeUserStyle(
    request: AnalyzeUserStyleRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AnalyzeUserStyleResponse>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
