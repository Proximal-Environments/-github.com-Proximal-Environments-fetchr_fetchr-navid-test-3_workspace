// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.3
// source: cart/cart.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Product } from "../base/base";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "cart";

export interface AddOrderSuggestionItemsToCartRequest {
  orderId: string;
  orderSuggestionId: string;
}

export interface AddOrderSuggestionItemsToCartResponse {
  orderCart: OrderCart | undefined;
}

export interface UpdateProductInOrderCartRequest {
  orderId: string;
  productId: string;
  recommendedSize?: string | undefined;
  originalPrice?: number | undefined;
  currentPrice?: number | undefined;
  recommendedColor?: string | undefined;
}

export interface UpdateProductInOrderCartResponse {
  orderCart: OrderCart | undefined;
}

export interface OrderCartProduct {
  product: Product | undefined;
  recommendedSize?: string | undefined;
  originalPrice?: number | undefined;
  currentPrice: number;
  recommendedColor?: string | undefined;
}

export interface GetOrderCartRequest {
  orderId: string;
}

export interface GetOrderCartResponse {
  orderCart: OrderCart | undefined;
}

export interface AddProductToOrderCartRequest {
  orderId: string;
  productId: string;
}

export interface AddProductToOrderCartResponse {
  orderCart: OrderCart | undefined;
}

export interface RemoveProductFromOrderCartRequest {
  orderId: string;
  productId: string;
}

export interface RemoveProductFromOrderCartResponse {
  orderCart: OrderCart | undefined;
}

export interface ClearOrderCartRequest {
  orderId: string;
}

export interface ClearOrderCartResponse {
  orderCart: OrderCart | undefined;
}

export interface OrderCart {
  id: string;
  orderId: string;
  products: OrderCartProduct[];
  stylistNote: string;
}

/** Shared Types */
export interface Cart {
  id: string;
  userId: string;
  products: Product[];
  createdAt: Date | undefined;
}

/** Request Types */
export interface GetCartRequest {
  userId: string;
}

export interface GetCartResponse {
  cart: Cart | undefined;
}

export interface ClearCartRequest {
  userId: string;
}

export interface ClearCartResponse {
  cart: Cart | undefined;
}

export interface AddProductRequest {
  userId: string;
  productId: string;
}

export interface AddProductResponse {
  cart: Cart | undefined;
}

export interface RemoveProductRequest {
  userId: string;
  productId: string;
}

export interface RemoveProductResponse {
  cart: Cart | undefined;
}

export interface UpdateProductQuantityRequest {
  userId: string;
  productId: string;
  quantity: number;
}

export interface GetCartProductsResponse {
  products: Product[];
}

export interface CartProductList {
  products: Product[];
}

export interface CreateCartRequest {
  userId: string;
}

export interface CreateCartResponse {
  cart: Cart | undefined;
}

function createBaseAddOrderSuggestionItemsToCartRequest(): AddOrderSuggestionItemsToCartRequest {
  return { orderId: "", orderSuggestionId: "" };
}

export const AddOrderSuggestionItemsToCartRequest: MessageFns<AddOrderSuggestionItemsToCartRequest> = {
  encode(message: AddOrderSuggestionItemsToCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.orderSuggestionId !== "") {
      writer.uint32(18).string(message.orderSuggestionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOrderSuggestionItemsToCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrderSuggestionItemsToCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderSuggestionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrderSuggestionItemsToCartRequest {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      orderSuggestionId: isSet(object.orderSuggestionId) ? globalThis.String(object.orderSuggestionId) : "",
    };
  },

  toJSON(message: AddOrderSuggestionItemsToCartRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.orderSuggestionId !== "") {
      obj.orderSuggestionId = message.orderSuggestionId;
    }
    return obj;
  },
};

function createBaseAddOrderSuggestionItemsToCartResponse(): AddOrderSuggestionItemsToCartResponse {
  return { orderCart: undefined };
}

export const AddOrderSuggestionItemsToCartResponse: MessageFns<AddOrderSuggestionItemsToCartResponse> = {
  encode(message: AddOrderSuggestionItemsToCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderCart !== undefined) {
      OrderCart.encode(message.orderCart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddOrderSuggestionItemsToCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrderSuggestionItemsToCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderCart = OrderCart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddOrderSuggestionItemsToCartResponse {
    return { orderCart: isSet(object.orderCart) ? OrderCart.fromJSON(object.orderCart) : undefined };
  },

  toJSON(message: AddOrderSuggestionItemsToCartResponse): unknown {
    const obj: any = {};
    if (message.orderCart !== undefined) {
      obj.orderCart = OrderCart.toJSON(message.orderCart);
    }
    return obj;
  },
};

function createBaseUpdateProductInOrderCartRequest(): UpdateProductInOrderCartRequest {
  return {
    orderId: "",
    productId: "",
    recommendedSize: undefined,
    originalPrice: undefined,
    currentPrice: undefined,
    recommendedColor: undefined,
  };
}

export const UpdateProductInOrderCartRequest: MessageFns<UpdateProductInOrderCartRequest> = {
  encode(message: UpdateProductInOrderCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.recommendedSize !== undefined) {
      writer.uint32(26).string(message.recommendedSize);
    }
    if (message.originalPrice !== undefined) {
      writer.uint32(33).double(message.originalPrice);
    }
    if (message.currentPrice !== undefined) {
      writer.uint32(41).double(message.currentPrice);
    }
    if (message.recommendedColor !== undefined) {
      writer.uint32(50).string(message.recommendedColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductInOrderCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductInOrderCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recommendedSize = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.originalPrice = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.currentPrice = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.recommendedColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductInOrderCartRequest {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      recommendedSize: isSet(object.recommendedSize) ? globalThis.String(object.recommendedSize) : undefined,
      originalPrice: isSet(object.originalPrice) ? globalThis.Number(object.originalPrice) : undefined,
      currentPrice: isSet(object.currentPrice) ? globalThis.Number(object.currentPrice) : undefined,
      recommendedColor: isSet(object.recommendedColor) ? globalThis.String(object.recommendedColor) : undefined,
    };
  },

  toJSON(message: UpdateProductInOrderCartRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.recommendedSize !== undefined) {
      obj.recommendedSize = message.recommendedSize;
    }
    if (message.originalPrice !== undefined) {
      obj.originalPrice = message.originalPrice;
    }
    if (message.currentPrice !== undefined) {
      obj.currentPrice = message.currentPrice;
    }
    if (message.recommendedColor !== undefined) {
      obj.recommendedColor = message.recommendedColor;
    }
    return obj;
  },
};

function createBaseUpdateProductInOrderCartResponse(): UpdateProductInOrderCartResponse {
  return { orderCart: undefined };
}

export const UpdateProductInOrderCartResponse: MessageFns<UpdateProductInOrderCartResponse> = {
  encode(message: UpdateProductInOrderCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderCart !== undefined) {
      OrderCart.encode(message.orderCart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductInOrderCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductInOrderCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderCart = OrderCart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductInOrderCartResponse {
    return { orderCart: isSet(object.orderCart) ? OrderCart.fromJSON(object.orderCart) : undefined };
  },

  toJSON(message: UpdateProductInOrderCartResponse): unknown {
    const obj: any = {};
    if (message.orderCart !== undefined) {
      obj.orderCart = OrderCart.toJSON(message.orderCart);
    }
    return obj;
  },
};

function createBaseOrderCartProduct(): OrderCartProduct {
  return {
    product: undefined,
    recommendedSize: undefined,
    originalPrice: undefined,
    currentPrice: 0,
    recommendedColor: undefined,
  };
}

export const OrderCartProduct: MessageFns<OrderCartProduct> = {
  encode(message: OrderCartProduct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(10).fork()).join();
    }
    if (message.recommendedSize !== undefined) {
      writer.uint32(18).string(message.recommendedSize);
    }
    if (message.originalPrice !== undefined) {
      writer.uint32(25).double(message.originalPrice);
    }
    if (message.currentPrice !== 0) {
      writer.uint32(33).double(message.currentPrice);
    }
    if (message.recommendedColor !== undefined) {
      writer.uint32(42).string(message.recommendedColor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCartProduct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCartProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recommendedSize = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.originalPrice = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.currentPrice = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.recommendedColor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCartProduct {
    return {
      product: isSet(object.product) ? Product.fromJSON(object.product) : undefined,
      recommendedSize: isSet(object.recommendedSize) ? globalThis.String(object.recommendedSize) : undefined,
      originalPrice: isSet(object.originalPrice) ? globalThis.Number(object.originalPrice) : undefined,
      currentPrice: isSet(object.currentPrice) ? globalThis.Number(object.currentPrice) : 0,
      recommendedColor: isSet(object.recommendedColor) ? globalThis.String(object.recommendedColor) : undefined,
    };
  },

  toJSON(message: OrderCartProduct): unknown {
    const obj: any = {};
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    if (message.recommendedSize !== undefined) {
      obj.recommendedSize = message.recommendedSize;
    }
    if (message.originalPrice !== undefined) {
      obj.originalPrice = message.originalPrice;
    }
    if (message.currentPrice !== 0) {
      obj.currentPrice = message.currentPrice;
    }
    if (message.recommendedColor !== undefined) {
      obj.recommendedColor = message.recommendedColor;
    }
    return obj;
  },
};

function createBaseGetOrderCartRequest(): GetOrderCartRequest {
  return { orderId: "" };
}

export const GetOrderCartRequest: MessageFns<GetOrderCartRequest> = {
  encode(message: GetOrderCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderCartRequest {
    return { orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "" };
  },

  toJSON(message: GetOrderCartRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    return obj;
  },
};

function createBaseGetOrderCartResponse(): GetOrderCartResponse {
  return { orderCart: undefined };
}

export const GetOrderCartResponse: MessageFns<GetOrderCartResponse> = {
  encode(message: GetOrderCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderCart !== undefined) {
      OrderCart.encode(message.orderCart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrderCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderCart = OrderCart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderCartResponse {
    return { orderCart: isSet(object.orderCart) ? OrderCart.fromJSON(object.orderCart) : undefined };
  },

  toJSON(message: GetOrderCartResponse): unknown {
    const obj: any = {};
    if (message.orderCart !== undefined) {
      obj.orderCart = OrderCart.toJSON(message.orderCart);
    }
    return obj;
  },
};

function createBaseAddProductToOrderCartRequest(): AddProductToOrderCartRequest {
  return { orderId: "", productId: "" };
}

export const AddProductToOrderCartRequest: MessageFns<AddProductToOrderCartRequest> = {
  encode(message: AddProductToOrderCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddProductToOrderCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProductToOrderCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProductToOrderCartRequest {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
    };
  },

  toJSON(message: AddProductToOrderCartRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    return obj;
  },
};

function createBaseAddProductToOrderCartResponse(): AddProductToOrderCartResponse {
  return { orderCart: undefined };
}

export const AddProductToOrderCartResponse: MessageFns<AddProductToOrderCartResponse> = {
  encode(message: AddProductToOrderCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderCart !== undefined) {
      OrderCart.encode(message.orderCart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddProductToOrderCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProductToOrderCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderCart = OrderCart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProductToOrderCartResponse {
    return { orderCart: isSet(object.orderCart) ? OrderCart.fromJSON(object.orderCart) : undefined };
  },

  toJSON(message: AddProductToOrderCartResponse): unknown {
    const obj: any = {};
    if (message.orderCart !== undefined) {
      obj.orderCart = OrderCart.toJSON(message.orderCart);
    }
    return obj;
  },
};

function createBaseRemoveProductFromOrderCartRequest(): RemoveProductFromOrderCartRequest {
  return { orderId: "", productId: "" };
}

export const RemoveProductFromOrderCartRequest: MessageFns<RemoveProductFromOrderCartRequest> = {
  encode(message: RemoveProductFromOrderCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProductFromOrderCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProductFromOrderCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProductFromOrderCartRequest {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
    };
  },

  toJSON(message: RemoveProductFromOrderCartRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    return obj;
  },
};

function createBaseRemoveProductFromOrderCartResponse(): RemoveProductFromOrderCartResponse {
  return { orderCart: undefined };
}

export const RemoveProductFromOrderCartResponse: MessageFns<RemoveProductFromOrderCartResponse> = {
  encode(message: RemoveProductFromOrderCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderCart !== undefined) {
      OrderCart.encode(message.orderCart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProductFromOrderCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProductFromOrderCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderCart = OrderCart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProductFromOrderCartResponse {
    return { orderCart: isSet(object.orderCart) ? OrderCart.fromJSON(object.orderCart) : undefined };
  },

  toJSON(message: RemoveProductFromOrderCartResponse): unknown {
    const obj: any = {};
    if (message.orderCart !== undefined) {
      obj.orderCart = OrderCart.toJSON(message.orderCart);
    }
    return obj;
  },
};

function createBaseClearOrderCartRequest(): ClearOrderCartRequest {
  return { orderId: "" };
}

export const ClearOrderCartRequest: MessageFns<ClearOrderCartRequest> = {
  encode(message: ClearOrderCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearOrderCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearOrderCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearOrderCartRequest {
    return { orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "" };
  },

  toJSON(message: ClearOrderCartRequest): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    return obj;
  },
};

function createBaseClearOrderCartResponse(): ClearOrderCartResponse {
  return { orderCart: undefined };
}

export const ClearOrderCartResponse: MessageFns<ClearOrderCartResponse> = {
  encode(message: ClearOrderCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderCart !== undefined) {
      OrderCart.encode(message.orderCart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearOrderCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearOrderCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderCart = OrderCart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearOrderCartResponse {
    return { orderCart: isSet(object.orderCart) ? OrderCart.fromJSON(object.orderCart) : undefined };
  },

  toJSON(message: ClearOrderCartResponse): unknown {
    const obj: any = {};
    if (message.orderCart !== undefined) {
      obj.orderCart = OrderCart.toJSON(message.orderCart);
    }
    return obj;
  },
};

function createBaseOrderCart(): OrderCart {
  return { id: "", orderId: "", products: [], stylistNote: "" };
}

export const OrderCart: MessageFns<OrderCart> = {
  encode(message: OrderCart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.orderId !== "") {
      writer.uint32(18).string(message.orderId);
    }
    for (const v of message.products) {
      OrderCartProduct.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.stylistNote !== "") {
      writer.uint32(34).string(message.stylistNote);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.products.push(OrderCartProduct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stylistNote = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCart {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      products: globalThis.Array.isArray(object?.products)
        ? object.products.map((e: any) => OrderCartProduct.fromJSON(e))
        : [],
      stylistNote: isSet(object.stylistNote) ? globalThis.String(object.stylistNote) : "",
    };
  },

  toJSON(message: OrderCart): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => OrderCartProduct.toJSON(e));
    }
    if (message.stylistNote !== "") {
      obj.stylistNote = message.stylistNote;
    }
    return obj;
  },
};

function createBaseCart(): Cart {
  return { id: "", userId: "", products: [], createdAt: undefined };
}

export const Cart: MessageFns<Cart> = {
  encode(message: Cart, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Cart {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cart {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: Cart): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },
};

function createBaseGetCartRequest(): GetCartRequest {
  return { userId: "" };
}

export const GetCartRequest: MessageFns<GetCartRequest> = {
  encode(message: GetCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCartRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetCartRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseGetCartResponse(): GetCartResponse {
  return { cart: undefined };
}

export const GetCartResponse: MessageFns<GetCartResponse> = {
  encode(message: GetCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cart !== undefined) {
      Cart.encode(message.cart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cart = Cart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCartResponse {
    return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
  },

  toJSON(message: GetCartResponse): unknown {
    const obj: any = {};
    if (message.cart !== undefined) {
      obj.cart = Cart.toJSON(message.cart);
    }
    return obj;
  },
};

function createBaseClearCartRequest(): ClearCartRequest {
  return { userId: "" };
}

export const ClearCartRequest: MessageFns<ClearCartRequest> = {
  encode(message: ClearCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearCartRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ClearCartRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseClearCartResponse(): ClearCartResponse {
  return { cart: undefined };
}

export const ClearCartResponse: MessageFns<ClearCartResponse> = {
  encode(message: ClearCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cart !== undefined) {
      Cart.encode(message.cart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cart = Cart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearCartResponse {
    return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
  },

  toJSON(message: ClearCartResponse): unknown {
    const obj: any = {};
    if (message.cart !== undefined) {
      obj.cart = Cart.toJSON(message.cart);
    }
    return obj;
  },
};

function createBaseAddProductRequest(): AddProductRequest {
  return { userId: "", productId: "" };
}

export const AddProductRequest: MessageFns<AddProductRequest> = {
  encode(message: AddProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProductRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
    };
  },

  toJSON(message: AddProductRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    return obj;
  },
};

function createBaseAddProductResponse(): AddProductResponse {
  return { cart: undefined };
}

export const AddProductResponse: MessageFns<AddProductResponse> = {
  encode(message: AddProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cart !== undefined) {
      Cart.encode(message.cart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cart = Cart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddProductResponse {
    return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
  },

  toJSON(message: AddProductResponse): unknown {
    const obj: any = {};
    if (message.cart !== undefined) {
      obj.cart = Cart.toJSON(message.cart);
    }
    return obj;
  },
};

function createBaseRemoveProductRequest(): RemoveProductRequest {
  return { userId: "", productId: "" };
}

export const RemoveProductRequest: MessageFns<RemoveProductRequest> = {
  encode(message: RemoveProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProductRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
    };
  },

  toJSON(message: RemoveProductRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    return obj;
  },
};

function createBaseRemoveProductResponse(): RemoveProductResponse {
  return { cart: undefined };
}

export const RemoveProductResponse: MessageFns<RemoveProductResponse> = {
  encode(message: RemoveProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cart !== undefined) {
      Cart.encode(message.cart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cart = Cart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveProductResponse {
    return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
  },

  toJSON(message: RemoveProductResponse): unknown {
    const obj: any = {};
    if (message.cart !== undefined) {
      obj.cart = Cart.toJSON(message.cart);
    }
    return obj;
  },
};

function createBaseUpdateProductQuantityRequest(): UpdateProductQuantityRequest {
  return { userId: "", productId: "", quantity: 0 };
}

export const UpdateProductQuantityRequest: MessageFns<UpdateProductQuantityRequest> = {
  encode(message: UpdateProductQuantityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).int32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductQuantityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductQuantityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductQuantityRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: UpdateProductQuantityRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },
};

function createBaseGetCartProductsResponse(): GetCartProductsResponse {
  return { products: [] };
}

export const GetCartProductsResponse: MessageFns<GetCartProductsResponse> = {
  encode(message: GetCartProductsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCartProductsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCartProductsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCartProductsResponse {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetCartProductsResponse): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },
};

function createBaseCartProductList(): CartProductList {
  return { products: [] };
}

export const CartProductList: MessageFns<CartProductList> = {
  encode(message: CartProductList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CartProductList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCartProductList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CartProductList {
    return {
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
    };
  },

  toJSON(message: CartProductList): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    return obj;
  },
};

function createBaseCreateCartRequest(): CreateCartRequest {
  return { userId: "" };
}

export const CreateCartRequest: MessageFns<CreateCartRequest> = {
  encode(message: CreateCartRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCartRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCartRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCartRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: CreateCartRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },
};

function createBaseCreateCartResponse(): CreateCartResponse {
  return { cart: undefined };
}

export const CreateCartResponse: MessageFns<CreateCartResponse> = {
  encode(message: CreateCartResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cart !== undefined) {
      Cart.encode(message.cart, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCartResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCartResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cart = Cart.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCartResponse {
    return { cart: isSet(object.cart) ? Cart.fromJSON(object.cart) : undefined };
  },

  toJSON(message: CreateCartResponse): unknown {
    const obj: any = {};
    if (message.cart !== undefined) {
      obj.cart = Cart.toJSON(message.cart);
    }
    return obj;
  },
};

/** Server */
export type CartServiceDefinition = typeof CartServiceDefinition;
export const CartServiceDefinition = {
  name: "CartService",
  fullName: "cart.CartService",
  methods: {
    getCart: {
      name: "GetCart",
      requestType: GetCartRequest,
      requestStream: false,
      responseType: GetCartResponse,
      responseStream: false,
      options: {},
    },
    clearCart: {
      name: "ClearCart",
      requestType: ClearCartRequest,
      requestStream: false,
      responseType: ClearCartResponse,
      responseStream: false,
      options: {},
    },
    addProduct: {
      name: "AddProduct",
      requestType: AddProductRequest,
      requestStream: false,
      responseType: AddProductResponse,
      responseStream: false,
      options: {},
    },
    removeProduct: {
      name: "RemoveProduct",
      requestType: RemoveProductRequest,
      requestStream: false,
      responseType: RemoveProductResponse,
      responseStream: false,
      options: {},
    },
    getCartProducts: {
      name: "GetCartProducts",
      requestType: GetCartRequest,
      requestStream: false,
      responseType: GetCartProductsResponse,
      responseStream: false,
      options: {},
    },
    getOrderCart: {
      name: "GetOrderCart",
      requestType: GetOrderCartRequest,
      requestStream: false,
      responseType: GetOrderCartResponse,
      responseStream: false,
      options: {},
    },
    addProductToOrderCart: {
      name: "AddProductToOrderCart",
      requestType: AddProductToOrderCartRequest,
      requestStream: false,
      responseType: AddProductToOrderCartResponse,
      responseStream: false,
      options: {},
    },
    removeProductFromOrderCart: {
      name: "RemoveProductFromOrderCart",
      requestType: RemoveProductFromOrderCartRequest,
      requestStream: false,
      responseType: RemoveProductFromOrderCartResponse,
      responseStream: false,
      options: {},
    },
    clearOrderCart: {
      name: "ClearOrderCart",
      requestType: ClearOrderCartRequest,
      requestStream: false,
      responseType: ClearOrderCartResponse,
      responseStream: false,
      options: {},
    },
    updateProductInOrderCart: {
      name: "UpdateProductInOrderCart",
      requestType: UpdateProductInOrderCartRequest,
      requestStream: false,
      responseType: UpdateProductInOrderCartResponse,
      responseStream: false,
      options: {},
    },
    addOrderSuggestionItemsToCart: {
      name: "AddOrderSuggestionItemsToCart",
      requestType: AddOrderSuggestionItemsToCartRequest,
      requestStream: false,
      responseType: AddOrderSuggestionItemsToCartResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface CartServiceImplementation<CallContextExt = {}> {
  getCart(request: GetCartRequest, context: CallContext & CallContextExt): Promise<GetCartResponse>;
  clearCart(request: ClearCartRequest, context: CallContext & CallContextExt): Promise<ClearCartResponse>;
  addProduct(request: AddProductRequest, context: CallContext & CallContextExt): Promise<AddProductResponse>;
  removeProduct(request: RemoveProductRequest, context: CallContext & CallContextExt): Promise<RemoveProductResponse>;
  getCartProducts(request: GetCartRequest, context: CallContext & CallContextExt): Promise<GetCartProductsResponse>;
  getOrderCart(request: GetOrderCartRequest, context: CallContext & CallContextExt): Promise<GetOrderCartResponse>;
  addProductToOrderCart(
    request: AddProductToOrderCartRequest,
    context: CallContext & CallContextExt,
  ): Promise<AddProductToOrderCartResponse>;
  removeProductFromOrderCart(
    request: RemoveProductFromOrderCartRequest,
    context: CallContext & CallContextExt,
  ): Promise<RemoveProductFromOrderCartResponse>;
  clearOrderCart(
    request: ClearOrderCartRequest,
    context: CallContext & CallContextExt,
  ): Promise<ClearOrderCartResponse>;
  updateProductInOrderCart(
    request: UpdateProductInOrderCartRequest,
    context: CallContext & CallContextExt,
  ): Promise<UpdateProductInOrderCartResponse>;
  addOrderSuggestionItemsToCart(
    request: AddOrderSuggestionItemsToCartRequest,
    context: CallContext & CallContextExt,
  ): Promise<AddOrderSuggestionItemsToCartResponse>;
}

export interface CartServiceClient<CallOptionsExt = {}> {
  getCart(request: GetCartRequest, options?: CallOptions & CallOptionsExt): Promise<GetCartResponse>;
  clearCart(request: ClearCartRequest, options?: CallOptions & CallOptionsExt): Promise<ClearCartResponse>;
  addProduct(request: AddProductRequest, options?: CallOptions & CallOptionsExt): Promise<AddProductResponse>;
  removeProduct(request: RemoveProductRequest, options?: CallOptions & CallOptionsExt): Promise<RemoveProductResponse>;
  getCartProducts(request: GetCartRequest, options?: CallOptions & CallOptionsExt): Promise<GetCartProductsResponse>;
  getOrderCart(request: GetOrderCartRequest, options?: CallOptions & CallOptionsExt): Promise<GetOrderCartResponse>;
  addProductToOrderCart(
    request: AddProductToOrderCartRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddProductToOrderCartResponse>;
  removeProductFromOrderCart(
    request: RemoveProductFromOrderCartRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveProductFromOrderCartResponse>;
  clearOrderCart(
    request: ClearOrderCartRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ClearOrderCartResponse>;
  updateProductInOrderCart(
    request: UpdateProductInOrderCartRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateProductInOrderCartResponse>;
  addOrderSuggestionItemsToCart(
    request: AddOrderSuggestionItemsToCartRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOrderSuggestionItemsToCartResponse>;
}

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
