// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.3
// source: admin/admin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Product } from "../base/base";

export const protobufPackage = "admin";

export interface SendMessageInChatRequest {
  chatId: string;
  message: string;
}

export interface SendMessageInChatResponse {
}

export interface CreatePendingRegisterUserProfileRequest {
  email: string;
  transcript: string;
  query: string;
}

export interface CreatePendingRegisterUserProfileResponse {
}

export interface ScrapeProductRequest {
  url: string;
}

export interface ScrapeProductResponse {
  result?:
    | { $case: "jobId"; jobId: string }
    | { $case: "product"; product: Product }
    | undefined;
  /** "pending", "completed", or "failed" */
  status: string;
}

export interface GetScrapeStatusRequest {
  jobId: string;
  /** needed for creating the final product */
  url: string;
}

export interface GetScrapeStatusResponse {
  /** "pending", "completed", or "failed" */
  status: string;
  product?: Product | undefined;
  error?: string | undefined;
}

/** No fields needed - user ID will be extracted from request context */
export interface ListProductUploadsRequest {
}

export interface ProductUpload {
  id: string;
  url: string;
  /** "pending", "completed", or "failed" */
  status: string;
  product?: Product | undefined;
  error?: string | undefined;
  createdAt: number;
}

export interface ListProductUploadsResponse {
  uploads: ProductUpload[];
}

function createBaseSendMessageInChatRequest(): SendMessageInChatRequest {
  return { chatId: "", message: "" };
}

export const SendMessageInChatRequest: MessageFns<SendMessageInChatRequest> = {
  encode(message: SendMessageInChatRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatId !== "") {
      writer.uint32(10).string(message.chatId);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageInChatRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageInChatRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMessageInChatRequest {
    return {
      chatId: isSet(object.chatId) ? globalThis.String(object.chatId) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SendMessageInChatRequest): unknown {
    const obj: any = {};
    if (message.chatId !== "") {
      obj.chatId = message.chatId;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },
};

function createBaseSendMessageInChatResponse(): SendMessageInChatResponse {
  return {};
}

export const SendMessageInChatResponse: MessageFns<SendMessageInChatResponse> = {
  encode(_: SendMessageInChatResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageInChatResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageInChatResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SendMessageInChatResponse {
    return {};
  },

  toJSON(_: SendMessageInChatResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseCreatePendingRegisterUserProfileRequest(): CreatePendingRegisterUserProfileRequest {
  return { email: "", transcript: "", query: "" };
}

export const CreatePendingRegisterUserProfileRequest: MessageFns<CreatePendingRegisterUserProfileRequest> = {
  encode(message: CreatePendingRegisterUserProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.transcript !== "") {
      writer.uint32(18).string(message.transcript);
    }
    if (message.query !== "") {
      writer.uint32(26).string(message.query);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePendingRegisterUserProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePendingRegisterUserProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transcript = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.query = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePendingRegisterUserProfileRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
      query: isSet(object.query) ? globalThis.String(object.query) : "",
    };
  },

  toJSON(message: CreatePendingRegisterUserProfileRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.transcript !== "") {
      obj.transcript = message.transcript;
    }
    if (message.query !== "") {
      obj.query = message.query;
    }
    return obj;
  },
};

function createBaseCreatePendingRegisterUserProfileResponse(): CreatePendingRegisterUserProfileResponse {
  return {};
}

export const CreatePendingRegisterUserProfileResponse: MessageFns<CreatePendingRegisterUserProfileResponse> = {
  encode(_: CreatePendingRegisterUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePendingRegisterUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePendingRegisterUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreatePendingRegisterUserProfileResponse {
    return {};
  },

  toJSON(_: CreatePendingRegisterUserProfileResponse): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseScrapeProductRequest(): ScrapeProductRequest {
  return { url: "" };
}

export const ScrapeProductRequest: MessageFns<ScrapeProductRequest> = {
  encode(message: ScrapeProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScrapeProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScrapeProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScrapeProductRequest {
    return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
  },

  toJSON(message: ScrapeProductRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },
};

function createBaseScrapeProductResponse(): ScrapeProductResponse {
  return { result: undefined, status: "" };
}

export const ScrapeProductResponse: MessageFns<ScrapeProductResponse> = {
  encode(message: ScrapeProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.result?.$case) {
      case "jobId":
        writer.uint32(10).string(message.result.jobId);
        break;
      case "product":
        Product.encode(message.result.product, writer.uint32(18).fork()).join();
        break;
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScrapeProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScrapeProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = { $case: "jobId", jobId: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.result = { $case: "product", product: Product.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScrapeProductResponse {
    return {
      result: isSet(object.jobId)
        ? { $case: "jobId", jobId: globalThis.String(object.jobId) }
        : isSet(object.product)
        ? { $case: "product", product: Product.fromJSON(object.product) }
        : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: ScrapeProductResponse): unknown {
    const obj: any = {};
    if (message.result?.$case === "jobId") {
      obj.jobId = message.result.jobId;
    } else if (message.result?.$case === "product") {
      obj.product = Product.toJSON(message.result.product);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },
};

function createBaseGetScrapeStatusRequest(): GetScrapeStatusRequest {
  return { jobId: "", url: "" };
}

export const GetScrapeStatusRequest: MessageFns<GetScrapeStatusRequest> = {
  encode(message: GetScrapeStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScrapeStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScrapeStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScrapeStatusRequest {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: GetScrapeStatusRequest): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },
};

function createBaseGetScrapeStatusResponse(): GetScrapeStatusResponse {
  return { status: "", product: undefined, error: undefined };
}

export const GetScrapeStatusResponse: MessageFns<GetScrapeStatusResponse> = {
  encode(message: GetScrapeStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(18).fork()).join();
    }
    if (message.error !== undefined) {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetScrapeStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetScrapeStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetScrapeStatusResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      product: isSet(object.product) ? Product.fromJSON(object.product) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
    };
  },

  toJSON(message: GetScrapeStatusResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    return obj;
  },
};

function createBaseListProductUploadsRequest(): ListProductUploadsRequest {
  return {};
}

export const ListProductUploadsRequest: MessageFns<ListProductUploadsRequest> = {
  encode(_: ListProductUploadsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductUploadsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductUploadsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListProductUploadsRequest {
    return {};
  },

  toJSON(_: ListProductUploadsRequest): unknown {
    const obj: any = {};
    return obj;
  },
};

function createBaseProductUpload(): ProductUpload {
  return { id: "", url: "", status: "", product: undefined, error: undefined, createdAt: 0 };
}

export const ProductUpload: MessageFns<ProductUpload> = {
  encode(message: ProductUpload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.product !== undefined) {
      Product.encode(message.product, writer.uint32(34).fork()).join();
    }
    if (message.error !== undefined) {
      writer.uint32(42).string(message.error);
    }
    if (message.createdAt !== 0) {
      writer.uint32(48).int64(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductUpload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductUpload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.product = Product.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductUpload {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      product: isSet(object.product) ? Product.fromJSON(object.product) : undefined,
      error: isSet(object.error) ? globalThis.String(object.error) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
    };
  },

  toJSON(message: ProductUpload): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.product !== undefined) {
      obj.product = Product.toJSON(message.product);
    }
    if (message.error !== undefined) {
      obj.error = message.error;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    return obj;
  },
};

function createBaseListProductUploadsResponse(): ListProductUploadsResponse {
  return { uploads: [] };
}

export const ListProductUploadsResponse: MessageFns<ListProductUploadsResponse> = {
  encode(message: ListProductUploadsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.uploads) {
      ProductUpload.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProductUploadsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProductUploadsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uploads.push(ProductUpload.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProductUploadsResponse {
    return {
      uploads: globalThis.Array.isArray(object?.uploads)
        ? object.uploads.map((e: any) => ProductUpload.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListProductUploadsResponse): unknown {
    const obj: any = {};
    if (message.uploads?.length) {
      obj.uploads = message.uploads.map((e) => ProductUpload.toJSON(e));
    }
    return obj;
  },
};

export type AdminServiceDefinition = typeof AdminServiceDefinition;
export const AdminServiceDefinition = {
  name: "AdminService",
  fullName: "admin.AdminService",
  methods: {
    scrapeProduct: {
      name: "ScrapeProduct",
      requestType: ScrapeProductRequest,
      requestStream: false,
      responseType: ScrapeProductResponse,
      responseStream: false,
      options: {},
    },
    getScrapeStatus: {
      name: "GetScrapeStatus",
      requestType: GetScrapeStatusRequest,
      requestStream: false,
      responseType: GetScrapeStatusResponse,
      responseStream: false,
      options: {},
    },
    listProductUploads: {
      name: "ListProductUploads",
      requestType: ListProductUploadsRequest,
      requestStream: false,
      responseType: ListProductUploadsResponse,
      responseStream: false,
      options: {},
    },
    createPendingRegisterUserProfile: {
      name: "CreatePendingRegisterUserProfile",
      requestType: CreatePendingRegisterUserProfileRequest,
      requestStream: false,
      responseType: CreatePendingRegisterUserProfileResponse,
      responseStream: false,
      options: {},
    },
    sendMessageInChat: {
      name: "SendMessageInChat",
      requestType: SendMessageInChatRequest,
      requestStream: false,
      responseType: SendMessageInChatResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AdminServiceImplementation<CallContextExt = {}> {
  scrapeProduct(request: ScrapeProductRequest, context: CallContext & CallContextExt): Promise<ScrapeProductResponse>;
  getScrapeStatus(
    request: GetScrapeStatusRequest,
    context: CallContext & CallContextExt,
  ): Promise<GetScrapeStatusResponse>;
  listProductUploads(
    request: ListProductUploadsRequest,
    context: CallContext & CallContextExt,
  ): Promise<ListProductUploadsResponse>;
  createPendingRegisterUserProfile(
    request: CreatePendingRegisterUserProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<CreatePendingRegisterUserProfileResponse>;
  sendMessageInChat(
    request: SendMessageInChatRequest,
    context: CallContext & CallContextExt,
  ): Promise<SendMessageInChatResponse>;
}

export interface AdminServiceClient<CallOptionsExt = {}> {
  scrapeProduct(request: ScrapeProductRequest, options?: CallOptions & CallOptionsExt): Promise<ScrapeProductResponse>;
  getScrapeStatus(
    request: GetScrapeStatusRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetScrapeStatusResponse>;
  listProductUploads(
    request: ListProductUploadsRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProductUploadsResponse>;
  createPendingRegisterUserProfile(
    request: CreatePendingRegisterUserProfileRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreatePendingRegisterUserProfileResponse>;
  sendMessageInChat(
    request: SendMessageInChatRequest,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SendMessageInChatResponse>;
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
